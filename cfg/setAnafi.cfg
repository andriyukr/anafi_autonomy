#! /usr/bin/env python

PACKAGE='anafi_autonomy'

import roslib
import rospkg

roslib.load_manifest(PACKAGE)

rospack = rospkg.RosPack()
package_path = rospack.get_path(PACKAGE)	

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

ending_behavior_enum = gen.enum([	gen.const("land", 				int_t, 	0, 	"Land after RTH"),
					gen.const("hover", 				int_t, 	1, 	"Hover after RTL")
					], "Ending behavior")
camera_mode_enum = gen.enum([		gen.const("1280x720", 				int_t, 	0, 	"Camera in recording mode"),
					gen.const("1024x768", 				int_t, 	1, 	"Camera in photo mode")
					], "Camera mode")
ev_compensation_enum = gen.enum([	gen.const("minus_3_00", 			int_t, 	0, 	"-3.00 EV"),
					gen.const("minus_2_00", 			int_t, 	3, 	"-2.00 EV"),
					gen.const("minus_1_00", 			int_t, 	6, 	"-1.00 EV"),
					gen.const("plus_0_00", 			int_t, 	9, 	"0.00 EV"),
					gen.const("plus_1_00", 			int_t, 	12, 	"1.00 EV"),
					gen.const("plus_2_00", 			int_t, 	15, 	"2.00 EV"),
					gen.const("plus_3_00", 			int_t, 	18, 	"3.00 EV")
					], "EV compensation")
streaming_mode_enum = gen.enum([	gen.const("low_latency", 			int_t, 	0, 	"Minimize latency with average reliability (best for piloting)"),
					gen.const("high_reliability", 		int_t, 	1, 	"Maximize the reliability with an average latency"),
					gen.const("high_reliability_low_framerate", 	int_t, 	2, 	"Maximize the reliability using a framerate decimation with an average latency")
					], "Streaming mode")
image_style_enum = gen.enum([		gen.const("standard", 				int_t, 	0, 	"Natural look style"),
					gen.const("plog", 				int_t, 	1, 	"Produces flat and desaturated images, best for post-processing"),
					gen.const("intense", 				int_t, 	2, 	"Intense style: bright colors, warm shade, high contrast"),
					gen.const("pastel", 				int_t, 	3, 	"Pastel style: soft colors, cold shade, low contrast")
					], "Images style")
photo_mode_enum = gen.enum([		gen.const("single", 				int_t, 	0, 	"Single shot"),
					gen.const("bracketing", 			int_t, 	1, 	"Takes a burst of frames with a different exposure"),
					gen.const("burst", 				int_t, 	2, 	"Takes burst of frames"),
					gen.const("time_laps", 			int_t, 	3, 	"Takes frames at a regular time interval"),
					gen.const("gps_lapse", 			int_t, 	4, 	"Takes frames at a regular GPS position interval")
					], "Photo mode")
photo_format_enum = gen.enum([	gen.const("full_frame", 			int_t, 	0, 	"Sensor full resolution, not dewarped"),
					gen.const("rectilinear", 			int_t, 	1, 	"Rectilinear projection, dewarped")
					], "Photo format")
file_format_enum = gen.enum([		gen.const("jpeg", 				int_t, 	0, 	"Photo recorded in JPEG format"),
					gen.const("dng", 				int_t, 	1, 	"Photo recorded in DNG format"),
					gen.const("dng_jpeg", 				int_t, 	2, 	"Photo recorded in both DNG and JPEG format")
					], "File format")
recording_mode_enum = gen.enum([	gen.const("standard", 				int_t, 	0, 	"Standard mode"),
					gen.const("hyperlapse", 			int_t, 	1, 	"Creates an accelerated video by dropping some frame at rate define by hyperlapse_value"),
					gen.const("slow_motion", 			int_t, 	2, 	"Record slowed-down videos"),
					gen.const("high_framerate", 			int_t, 	3, 	"Record high-framerate videos"),
					gen.const("high_resolution", 			int_t, 	4, 	"Record high-resolution videos")
					], "Recording mode")
home_type_enum = gen.enum([		gen.const("takeoff", 				int_t, 	1, 	"Return to the last takeoff location"),
					gen.const("custom", 				int_t, 	3, 	"Return to a user-set custom location"),
					gen.const("pilot", 				int_t, 	4, 	"Return to the pilot position")
					], "Home type")
								
#       	Name					Type      	Level	Description					Default 	Min	Max	Values 			      Original
piloting = gen.add_group("Piloting")
piloting.add(	"max_tilt",    			double_t,    	1, 	"Max pitch/roll (in deg)", 			10,  		1, 	40) 						# 10
piloting.add(	"max_vertical_speed",  		double_t,    	1, 	"Max vertical speed (in m/s)", 		1,  		0.1, 	4) 						# 3
piloting.add(	"max_horizontal_speed",  		double_t,    	1, 	"Max horizontal speed (in m/s)", 		1,  		0.1, 	15) 						# 
piloting.add(	"max_yaw_rotation_speed",  		double_t,    	1, 	"Max yaw rotation speed (in deg/s)", 		180,  		3, 	200) 						# 40
piloting.add(	"max_pitch_roll_rotation_speed", 	double_t,    	1, 	"Max pitch/roll rotation speed (in deg/s)", 	200,  		40, 	300) 						# 116
piloting.add(	"max_distance",    			double_t,    	1, 	"Max distance (in m)", 			10,  		10, 	4000) 						# 100
piloting.add(	"max_altitude",    			double_t,    	1, 	"Max altitude (in m)", 			2,  		0.5, 	4000) 						# 150
piloting.add(	"banked_turn",    			bool_t,    	1, 	"Enable banked turn", 				True)									# True
piloting.add(	"camera_operated",    			bool_t,    	1, 	"Commands are relative to the camera pitch", 	False)									# False
rth = gen.add_group("Return to Home")
rth.add(	"home_type",    			int_t,    	2, 	"Home type for RTH", 				1,  		1, 	4, 	edit_method=home_type_enum) 		# 1
rth.add(	"min_altitude",    			double_t,    	2, 	"RTH minimum altitude (in m)", 		20,  		20, 	100) 						# 20
rth.add(	"ending_behavior",    			int_t,    	2, 	"Ending behavior for RTH", 			1,  		0, 	1, 	edit_method=ending_behavior_enum) 	# 0
rth.add(	"hovering_altitude",    		double_t,    	2, 	"RTH ending hovering altitude (in m)", 	10,  		1, 	10) 						# 10
rth.add(	"precise_home",    			bool_t,    	2, 	"Enable precise RTH", 				True)									# False
rth.add(	"auto_trigger",    			bool_t,    	2, 	"Enable auto trigger RTH", 			True)									# True
camera = gen.add_group("Camera")
camera.add(	"hdr",    				bool_t,    	3, 	"Enable HDR", 					True)  								# False
camera.add(	"camera_mode",    			int_t,    	3, 	"Camera mode", 				0,  		0, 	3, 	edit_method=camera_mode_enum) 	# 0
camera.add(	"ev_compensation",    			int_t,    	3, 	"EV compensation", 				9,  		0, 	18, 	edit_method=ev_compensation_enum) 	# 3
camera.add(	"streaming_mode",    			int_t,    	3, 	"Streaming mode", 				0,  		0, 	2, 	edit_method=streaming_mode_enum) 	# 0
camera.add(	"image_style",    			int_t,    	3, 	"Images style", 				0,  		0, 	3, 	edit_method=image_style_enum) 	# 0
camera.add(	"max_zoom_speed",    			double_t,    	3, 	"Max zoom speed (in tan(deg)/sec)", 		10,  		0.1, 	10)  						# 0.34
photo = gen.add_group("Photo")
photo.add(	"photo_mode",    			int_t,    	4, 	"Photo mode", 					0,  		0, 	4, 	edit_method=photo_mode_enum) 		# 0
photo.add(	"photo_format",    			int_t,    	4, 	"Photo format", 				1,  		0, 	1, 	edit_method=photo_format_enum) 	# 1
photo.add(	"file_format",    			int_t,    	4, 	"File format", 				0,  		0, 	2, 	edit_method=file_format_enum) 	# 0
video = gen.add_group("Video")
video.add(	"autorecord",    			bool_t,    	5, 	"Enable autorecord at takeoff", 		False)  								# True
video.add(	"recording_mode",    			int_t,    	5, 	"Recording mode", 				0,  		0, 	4, 	edit_method=recording_mode_enum) 	# 0
media = gen.add_group("Media")
media.add(	"download_folder",    			str_t,    	6, 	"Absolute path to the download folder", 	package_path+"/media")							# 
media.add(	"cut_media",    			bool_t,    	6, 	"Delete media after download", 		True)  								# False
gimbal = gen.add_group("Gimbal")
gimbal.add(	"gimbal_absolute",    			bool_t,    	7, 	"Enable gimbal roll/pitch compensation", 	False)  								# True
gimbal.add(	"max_gimbal_speed",    		double_t,    	7, 	"Max gimbal speed (in deg/s)", 		180,  		1, 	180)  						# 

exit(gen.generate(PACKAGE, "anafi_autonomy", "setAnafi"))
