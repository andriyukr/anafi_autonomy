#! /usr/bin/env python

PACKAGE='anafi_autonomy'

import roslib
import rospkg

roslib.load_manifest(PACKAGE)

rospack = rospkg.RosPack()
package_path = rospack.get_path(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

mission_type_enum = gen.enum([ 	gen.const("FlightPlan", 	int_t, 	0, 	"Flight plan"),
					gen.const("FollowMe", 		int_t, 	1, 	"Follow me")
					], "Mission type")
followme_mode_enum = gen.enum([ 	gen.const("look_at", 		int_t, 	1, 	"Look at the target without moving automatically"),
					gen.const("geographic", 	int_t, 	2, 	"Follow the target keeping the same vector"),
					gen.const("relative", 		int_t, 	3, 	"Follow the target keeping the same orientation to its direction"),
					gen.const("leash", 		int_t, 	4, 	"Follow the target as it was held by a leash")
					], "FollowMe mode")					
					
#       	Name			Type      	Level	Description					Default 	Min	Max 	Values 				Original
gen.add(	"hand_launch", 	bool_t,	1,	"Enable hand luanched takeoff",		False)
gen.add(	"takingoff_control", 	bool_t,	1,	"Control during takeoff",			False)
gen.add(	"landing_control", 	bool_t,	1,	"Control during landing",			False)
gen.add(	"fixed_frame", 	bool_t,	1,	"Fixed frame for velocity commands",		False)
gen.add(	"world_frame", 	bool_t,	1,	"Yaw in world frame",				False)
mission = gen.add_group("Mission")
mission.add(	"mission_type",    	int_t,    	2, 	"Mission type", 				0,  		0, 	1, 	edit_method=mission_type_enum) 	# 0
mission.add(	"flightplan_file", 	str_t,    	2, 	"Absolute path to the FlightPlan file", 	package_path+"/missions/"+"test"+".mavlink") 				# 
mission.add(	"followme_mode",    	int_t,    	2, 	"FollowMe mode", 				2,  		1, 	4, 	edit_method=followme_mode_enum) 	# 
gains = gen.add_group("Gains Position")
gains.add(	"k_p_position",    	double_t,    	3, 	"Proportional gain for position", 		2.0,  		0, 	10) 						# 2.0
gains.add(	"k_i_position",    	double_t,    	3, 	"Integral gain for position", 		1.0,  		0, 	10) 						# 1.0
gains.add(	"k_d_position",    	double_t,    	3, 	"Derivative gain for position", 		0.5,  		0, 	10) 						# 0.3
gains.add(	"max_i_position",    	double_t,    	3, 	"Max integral part for position", 		0.1,  		0, 	1) 						# 0.1
gains = gen.add_group("Gains Velocity")
gains.add(	"k_p_velocity",    	double_t,    	3, 	"Proportional gain for velocity", 		9.1,  		0, 	10) 						# 2.0
gains.add(	"k_d_velocity",    	double_t,    	3, 	"Derivative gain for velocity", 		1.3,  		0, 	10) 						# 0.5
gains = gen.add_group("Gains Heading")
gains.add(	"k_p_yaw",    		double_t,    	3, 	"Proportional gain for yaw", 			70,  		0, 	100) 						# 70

exit(gen.generate(PACKAGE, "anafi_autonomy", "setSafeAnafi"))
